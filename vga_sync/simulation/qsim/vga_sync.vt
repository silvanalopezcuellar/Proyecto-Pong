// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/23/2019 15:44:54"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    vga_sync
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module vga_sync_vlg_sample_tst(
	clk,
	rst,
	sampler_tx
);
input  clk;
input  rst;
output sampler_tx;

reg sample;
time current_time;
always @(clk or rst)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module vga_sync_vlg_check_tst (
	h_video_on_out,
	hsync_out,
	pixel,
	v_video_on_out,
	vsync_out,
	sampler_rx
);
input  h_video_on_out;
input  hsync_out;
input [11:0] pixel;
input  v_video_on_out;
input  vsync_out;
input sampler_rx;

reg  h_video_on_out_expected;
reg  hsync_out_expected;
reg [11:0] pixel_expected;
reg  v_video_on_out_expected;
reg  vsync_out_expected;

reg  h_video_on_out_prev;
reg  hsync_out_prev;
reg [11:0] pixel_prev;
reg  v_video_on_out_prev;
reg  vsync_out_prev;

reg  h_video_on_out_expected_prev;
reg  hsync_out_expected_prev;
reg [11:0] pixel_expected_prev;
reg  v_video_on_out_expected_prev;
reg  vsync_out_expected_prev;

reg  last_h_video_on_out_exp;
reg  last_hsync_out_exp;
reg [11:0] last_pixel_exp;
reg  last_v_video_on_out_exp;
reg  last_vsync_out_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	h_video_on_out_prev = h_video_on_out;
	hsync_out_prev = hsync_out;
	pixel_prev = pixel;
	v_video_on_out_prev = v_video_on_out;
	vsync_out_prev = vsync_out;
end

// update expected /o prevs

always @(trigger)
begin
	h_video_on_out_expected_prev = h_video_on_out_expected;
	hsync_out_expected_prev = hsync_out_expected;
	pixel_expected_prev = pixel_expected;
	v_video_on_out_expected_prev = v_video_on_out_expected;
	vsync_out_expected_prev = vsync_out_expected;
end



// expected h_video_on_out
initial
begin
	h_video_on_out_expected = 1'bX;
end 

// expected hsync_out
initial
begin
	hsync_out_expected = 1'bX;
end 

// expected v_video_on_out
initial
begin
	v_video_on_out_expected = 1'bX;
end 

// expected vsync_out
initial
begin
	vsync_out_expected = 1'bX;
end 
// expected pixel[ 11 ]
initial
begin
	pixel_expected[11] = 1'bX;
end 
// expected pixel[ 10 ]
initial
begin
	pixel_expected[10] = 1'bX;
end 
// expected pixel[ 9 ]
initial
begin
	pixel_expected[9] = 1'bX;
end 
// expected pixel[ 8 ]
initial
begin
	pixel_expected[8] = 1'bX;
end 
// expected pixel[ 7 ]
initial
begin
	pixel_expected[7] = 1'bX;
end 
// expected pixel[ 6 ]
initial
begin
	pixel_expected[6] = 1'bX;
end 
// expected pixel[ 5 ]
initial
begin
	pixel_expected[5] = 1'bX;
end 
// expected pixel[ 4 ]
initial
begin
	pixel_expected[4] = 1'bX;
end 
// expected pixel[ 3 ]
initial
begin
	pixel_expected[3] = 1'bX;
end 
// expected pixel[ 2 ]
initial
begin
	pixel_expected[2] = 1'bX;
end 
// expected pixel[ 1 ]
initial
begin
	pixel_expected[1] = 1'bX;
end 
// expected pixel[ 0 ]
initial
begin
	pixel_expected[0] = 1'bX;
end 
// generate trigger
always @(h_video_on_out_expected or h_video_on_out or hsync_out_expected or hsync_out or pixel_expected or pixel or v_video_on_out_expected or v_video_on_out or vsync_out_expected or vsync_out)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected h_video_on_out = %b | expected hsync_out = %b | expected pixel = %b | expected v_video_on_out = %b | expected vsync_out = %b | ",h_video_on_out_expected_prev,hsync_out_expected_prev,pixel_expected_prev,v_video_on_out_expected_prev,vsync_out_expected_prev);
	$display("| real h_video_on_out = %b | real hsync_out = %b | real pixel = %b | real v_video_on_out = %b | real vsync_out = %b | ",h_video_on_out_prev,hsync_out_prev,pixel_prev,v_video_on_out_prev,vsync_out_prev);
`endif
	if (
		( h_video_on_out_expected_prev !== 1'bx ) && ( h_video_on_out_prev !== h_video_on_out_expected_prev )
		&& ((h_video_on_out_expected_prev !== last_h_video_on_out_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port h_video_on_out :: @time = %t",  $realtime);
		$display ("     Expected value = %b", h_video_on_out_expected_prev);
		$display ("     Real value = %b", h_video_on_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_h_video_on_out_exp = h_video_on_out_expected_prev;
	end
	if (
		( hsync_out_expected_prev !== 1'bx ) && ( hsync_out_prev !== hsync_out_expected_prev )
		&& ((hsync_out_expected_prev !== last_hsync_out_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hsync_out :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hsync_out_expected_prev);
		$display ("     Real value = %b", hsync_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_hsync_out_exp = hsync_out_expected_prev;
	end
	if (
		( pixel_expected_prev[0] !== 1'bx ) && ( pixel_prev[0] !== pixel_expected_prev[0] )
		&& ((pixel_expected_prev[0] !== last_pixel_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pixel[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pixel_expected_prev);
		$display ("     Real value = %b", pixel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_pixel_exp[0] = pixel_expected_prev[0];
	end
	if (
		( pixel_expected_prev[1] !== 1'bx ) && ( pixel_prev[1] !== pixel_expected_prev[1] )
		&& ((pixel_expected_prev[1] !== last_pixel_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pixel[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pixel_expected_prev);
		$display ("     Real value = %b", pixel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_pixel_exp[1] = pixel_expected_prev[1];
	end
	if (
		( pixel_expected_prev[2] !== 1'bx ) && ( pixel_prev[2] !== pixel_expected_prev[2] )
		&& ((pixel_expected_prev[2] !== last_pixel_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pixel[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pixel_expected_prev);
		$display ("     Real value = %b", pixel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_pixel_exp[2] = pixel_expected_prev[2];
	end
	if (
		( pixel_expected_prev[3] !== 1'bx ) && ( pixel_prev[3] !== pixel_expected_prev[3] )
		&& ((pixel_expected_prev[3] !== last_pixel_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pixel[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pixel_expected_prev);
		$display ("     Real value = %b", pixel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_pixel_exp[3] = pixel_expected_prev[3];
	end
	if (
		( pixel_expected_prev[4] !== 1'bx ) && ( pixel_prev[4] !== pixel_expected_prev[4] )
		&& ((pixel_expected_prev[4] !== last_pixel_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pixel[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pixel_expected_prev);
		$display ("     Real value = %b", pixel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_pixel_exp[4] = pixel_expected_prev[4];
	end
	if (
		( pixel_expected_prev[5] !== 1'bx ) && ( pixel_prev[5] !== pixel_expected_prev[5] )
		&& ((pixel_expected_prev[5] !== last_pixel_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pixel[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pixel_expected_prev);
		$display ("     Real value = %b", pixel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_pixel_exp[5] = pixel_expected_prev[5];
	end
	if (
		( pixel_expected_prev[6] !== 1'bx ) && ( pixel_prev[6] !== pixel_expected_prev[6] )
		&& ((pixel_expected_prev[6] !== last_pixel_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pixel[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pixel_expected_prev);
		$display ("     Real value = %b", pixel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_pixel_exp[6] = pixel_expected_prev[6];
	end
	if (
		( pixel_expected_prev[7] !== 1'bx ) && ( pixel_prev[7] !== pixel_expected_prev[7] )
		&& ((pixel_expected_prev[7] !== last_pixel_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pixel[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pixel_expected_prev);
		$display ("     Real value = %b", pixel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_pixel_exp[7] = pixel_expected_prev[7];
	end
	if (
		( pixel_expected_prev[8] !== 1'bx ) && ( pixel_prev[8] !== pixel_expected_prev[8] )
		&& ((pixel_expected_prev[8] !== last_pixel_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pixel[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pixel_expected_prev);
		$display ("     Real value = %b", pixel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_pixel_exp[8] = pixel_expected_prev[8];
	end
	if (
		( pixel_expected_prev[9] !== 1'bx ) && ( pixel_prev[9] !== pixel_expected_prev[9] )
		&& ((pixel_expected_prev[9] !== last_pixel_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pixel[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pixel_expected_prev);
		$display ("     Real value = %b", pixel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_pixel_exp[9] = pixel_expected_prev[9];
	end
	if (
		( pixel_expected_prev[10] !== 1'bx ) && ( pixel_prev[10] !== pixel_expected_prev[10] )
		&& ((pixel_expected_prev[10] !== last_pixel_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pixel[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pixel_expected_prev);
		$display ("     Real value = %b", pixel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_pixel_exp[10] = pixel_expected_prev[10];
	end
	if (
		( pixel_expected_prev[11] !== 1'bx ) && ( pixel_prev[11] !== pixel_expected_prev[11] )
		&& ((pixel_expected_prev[11] !== last_pixel_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pixel[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pixel_expected_prev);
		$display ("     Real value = %b", pixel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_pixel_exp[11] = pixel_expected_prev[11];
	end
	if (
		( v_video_on_out_expected_prev !== 1'bx ) && ( v_video_on_out_prev !== v_video_on_out_expected_prev )
		&& ((v_video_on_out_expected_prev !== last_v_video_on_out_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port v_video_on_out :: @time = %t",  $realtime);
		$display ("     Expected value = %b", v_video_on_out_expected_prev);
		$display ("     Real value = %b", v_video_on_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_v_video_on_out_exp = v_video_on_out_expected_prev;
	end
	if (
		( vsync_out_expected_prev !== 1'bx ) && ( vsync_out_prev !== vsync_out_expected_prev )
		&& ((vsync_out_expected_prev !== last_vsync_out_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vsync_out :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vsync_out_expected_prev);
		$display ("     Real value = %b", vsync_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_vsync_out_exp = vsync_out_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module vga_sync_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg rst;
// wires                                               
wire h_video_on_out;
wire hsync_out;
wire [11:0] pixel;
wire v_video_on_out;
wire vsync_out;

wire sampler;                             

// assign statements (if any)                          
vga_sync i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.h_video_on_out(h_video_on_out),
	.hsync_out(hsync_out),
	.pixel(pixel),
	.rst(rst),
	.v_video_on_out(v_video_on_out),
	.vsync_out(vsync_out)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// rst
initial
begin
	rst = 1'b1;
	rst = #20000 1'b0;
	rst = #30000 1'b1;
end 

vga_sync_vlg_sample_tst tb_sample (
	.clk(clk),
	.rst(rst),
	.sampler_tx(sampler)
);

vga_sync_vlg_check_tst tb_out(
	.h_video_on_out(h_video_on_out),
	.hsync_out(hsync_out),
	.pixel(pixel),
	.v_video_on_out(v_video_on_out),
	.vsync_out(vsync_out),
	.sampler_rx(sampler)
);
endmodule

